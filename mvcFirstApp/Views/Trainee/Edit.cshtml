@model mvcFirstApp.Models.Entities.Trainee
@{
    ViewData["Title"] = "Edit Trainee";
    Layout = "_MyLayout";
}
<div class="container-fluid">
    <div class="row justify-content-center">
        <div class="col-lg-8 col-xl-6">
            <div class="card shadow-lg border-0 rounded-4">
                <div class="card-header bg-primary text-white text-center py-4 rounded-top-4">
                    <h2 class="mb-0 fw-bold">
                        <i class="fas fa-user-edit me-2"></i>Edit Trainee
                    </h2>
                </div>
                <div class="card-body p-5">
                    <form asp-action="SaveEdit" method="post" enctype="multipart/form-data" id="traineeForm" novalidate>
                        <input type="hidden" asp-for="Id" />
                        <div asp-validation-summary="ModelOnly" class="text-danger mb-3"></div>
                        <!-- Name Field -->
                        <div class="mb-4">
                            <label asp-for="Name" class="form-label fw-semibold">
                                <i class="fas fa-user me-2 text-primary"></i>Full Name *
                            </label>
                            <input asp-for="Name" class="form-control form-control-lg rounded-3" placeholder="Enter full name" required minlength="3" maxlength="50" />
                            <span asp-validation-for="Name" class="text-danger small"></span>
                        </div>
                        <!-- Email Field -->
                        <div class="mb-4">
                            <label asp-for="Email" class="form-label fw-semibold">
                                <i class="fas fa-envelope me-2 text-primary"></i>Email Address *
                            </label>
                            <input asp-for="Email" class="form-control form-control-lg rounded-3" placeholder="trainee@example.com" required maxlength="150" />
                            <span asp-validation-for="Email" class="text-danger small"></span>
                        </div>
                        <!-- Date of Birth Field -->
                        <div class="mb-4">
                            <label asp-for="DateOfBirth" class="form-label fw-semibold">
                                <i class="fas fa-calendar-alt me-2 text-primary"></i>Date of Birth *
                            </label>
                            <input asp-for="DateOfBirth" class="form-control form-control-lg rounded-3" type="date" required />
                            <span asp-validation-for="DateOfBirth" class="text-danger small"></span>
                        </div>
                        <!-- Address Field -->
                        <div class="mb-4">
                            <label asp-for="Address" class="form-label fw-semibold">
                                <i class="fas fa-map-marker-alt me-2 text-primary"></i>Address
                            </label>
                            <textarea asp-for="Address" class="form-control form-control-lg rounded-3" placeholder="Enter complete address" rows="3" maxlength="500"></textarea>
                            <span asp-validation-for="Address" class="text-danger small"></span>
                        </div>
                        <!-- Image Upload Field -->
                        <div class="mb-4">
                            <label asp-for="ImageFile" class="form-label fw-semibold">
                                <i class="fas fa-image me-2 text-primary"></i>Profile Image
                            </label>
                            <input asp-for="ImageFile" class="form-control form-control-lg rounded-3" type="file" accept=".jpg,.jpeg,.png,.gif,.webp" id="imageUpload" />
                            <span asp-validation-for="ImageFile" class="text-danger small"></span>
                            <small class="text-muted">
                                <i class="fas fa-info-circle me-1"></i>
                                Optional: Upload an image (JPG, PNG, GIF, WebP - Max 5MB)
                            </small>
                            <div class="mt-3" id="imagePreview" style="display: none;">
                                <img id="previewImg" src="#" alt="Image Preview" class="img-thumbnail" style="max-width: 200px; max-height: 200px;">
                            </div>
                        </div>
                        <!-- Department Field -->
                        <div class="mb-5">
                            <label asp-for="DepartmentId" class="form-label fw-semibold">
                                <i class="fas fa-building me-2 text-primary"></i>Department *
                            </label>
                            <select asp-for="DepartmentId" class="form-select form-select-lg rounded-3" required>
                                <option value="">Choose a department...</option>
                                @if (ViewBag.Departments != null)
                                {
                                    foreach (var department in ViewBag.Departments)
                                    {
                                        if (department.Id == Model?.DepartmentId)
                                        {
                                            <option value="@department.Id" selected>@department.Name</option>
                                        }
                                        else
                                        {
                                            <option value="@department.Id">@department.Name</option>
                                        }
                                    }
                                }
                            </select>
                            <span asp-validation-for="DepartmentId" class="text-danger small"></span>
                        </div>
                        <!-- Form Actions -->
                        <div class="d-grid gap-2 d-md-flex justify-content-md-end">
                            <a href="/Trainee" class="btn btn-outline-secondary btn-lg px-4 me-md-2 rounded-3">
                                <i class="fas fa-times me-2"></i>Cancel
                            </a>
                            <button type="submit" class="btn btn-primary btn-lg px-5 rounded-3" id="submitBtn">
                                <span class="spinner-border spinner-border-sm me-2 d-none" id="loadingSpinner"></span>
                                <i class="fas fa-save me-2" id="saveIcon"></i>
                                Save Edits
                            </button>
                        </div>
                        @Html.Partial("_ValidationScriptsPartial")
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>
@section Scripts {
<script>
    document.addEventListener('DOMContentLoaded', function() {
        const form = document.getElementById('traineeForm');
        const submitBtn = document.getElementById('submitBtn');
        const loadingSpinner = document.getElementById('loadingSpinner');
        const saveIcon = document.getElementById('saveIcon');
        // Custom validation messages
        const validationMessages = {
            Name: 'Please enter a valid name (3-50 characters).',
            Email: 'Please enter a valid email address.',
            DateOfBirth: 'Please select a valid date of birth.',
            DepartmentId: 'Please select a department.'
        };
        // Real-time validation
        form.querySelectorAll('input, textarea, select').forEach(field => {
            field.addEventListener('input', function() {
                validateField(this);
            });
            field.addEventListener('blur', function() {
                validateField(this);
            });
        });
        function validateField(field) {
            const fieldName = field.name;
            let isValid = true;
            let customMessage = '';
            field.classList.remove('is-valid', 'is-invalid');
            if (field.hasAttribute('required') && !field.value.trim()) {
                isValid = false;
                customMessage = `${fieldName} is required.`;
            }
            if (field.value.trim()) {
                switch (fieldName) {
                    case 'Name':
                        if (field.value.trim().length < 3 || field.value.trim().length > 50) {
                            isValid = false;
                            customMessage = validationMessages.Name;
                        }
                        break;
                    case 'DateOfBirth':
                        if (!field.value) {
                            isValid = false;
                            customMessage = validationMessages.DateOfBirth;
                        }
                        break;
                    case 'DepartmentId':
                        if (!field.value || field.value === '0') {
                            isValid = false;
                            customMessage = validationMessages.DepartmentId;
                        }
                        break;
                }
            }
            if (isValid) {
                field.classList.add('is-valid');
                field.setCustomValidity('');
            } else {
                field.classList.add('is-invalid');
                field.setCustomValidity(customMessage);
            }
            return isValid;
        }
        form.addEventListener('submit', function(e) {
            let formIsValid = true;
            form.querySelectorAll('input, textarea, select').forEach(field => {
                if (!validateField(field) || !field.checkValidity()) {
                    formIsValid = false;
                }
            });
            if (!formIsValid) {
                e.preventDefault();
                const firstInvalidField = form.querySelector('.is-invalid');
                if (firstInvalidField) {
                    firstInvalidField.focus();
                }
                showToast('Please correct the highlighted errors before submitting.', 'error');
                return;
            }
            submitBtn.disabled = true;
            loadingSpinner.classList.remove('d-none');
            saveIcon.classList.add('d-none');
            submitBtn.innerHTML = '<span class="spinner-border spinner-border-sm me-2"></span>Saving...';
        });
        function showToast(message, type = 'info') {
            const toast = document.createElement('div');
            toast.className = `alert alert-${type === 'error' ? 'danger' : 'success'} alert-dismissible fade show position-fixed`;
            toast.style.cssText = 'top: 20px; right: 20px; z-index: 1050; min-width: 300px;';
            toast.innerHTML = `
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
            document.body.appendChild(toast);
            setTimeout(() => {
                if (toast.parentNode) {
                    toast.remove();
                }
            }, 5000);
        }
        // Image preview
        const imageUpload = document.getElementById('imageUpload');
        const imagePreview = document.getElementById('imagePreview');
        const previewImg = document.getElementById('previewImg');
        imageUpload.addEventListener('change', function(event) {
            const file = event.target.files[0];
            if (file) {
                const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/webp'];
                if (!allowedTypes.includes(file.type)) {
                    alert('Please select a valid image file (JPG, PNG, GIF, WebP)');
                    this.value = '';
                    imagePreview.style.display = 'none';
                    return;
                }
                if (file.size > 5 * 1024 * 1024) {
                    alert('File size must be less than 5MB');
                    this.value = '';
                    imagePreview.style.display = 'none';
                    return;
                }
                const reader = new FileReader();
                reader.onload = function(e) {
                    previewImg.src = e.target.result;
                    imagePreview.style.display = 'block';
                };
                reader.readAsDataURL(file);
            } else {
                imagePreview.style.display = 'none';
            }
        });
    });
</script>
}
<style>
    .card { transition: transform 0.2s ease-in-out; }
    .card:hover { transform: translateY(-2px); }
    .form-control:focus, .form-select:focus { border-color: #0d6efd; box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.15); }
    .input-group-text { font-weight: 600; }
</style>
