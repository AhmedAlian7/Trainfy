@model PaginatedList<Course>
@{
    ViewData["Title"] = "Courses Index";
    Layout = "_MyLayout";
}

<h1>Courses</h1>

<div class="container-fluid px-4 py-5">
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h1 class="display-5 fw-bold text-primary mb-2">Courses</h1>
                    <p class="text-muted">Manage and view course information</p>
                </div>
                <div>
                    <a class="btn btn-primary btn-lg px-4" href=@Url.Action("Add", "Course")>
                        <i class="fas fa-plus me-2"></i>Add New Course
                    </a>
                </div>
            </div>
        </div>
    </div>

    <!-- Search and Filter Section -->
    <div class="row mb-4">
        <div class="col-md-6">
            <div class="input-group">
                <span class="input-group-text bg-light border-end-0">
                    <i class="fas fa-search text-muted"></i>
                </span>
                <input type="text" class="form-control border-start-0" placeholder="Search courses..." id="searchInput">
            </div>
        </div>
        <div class="col-md-3">
            <select class="form-select" id="departmentFilter">
                <option value="">All Departments</option>
                @if (ViewBag.Departments != null)
                {
                    @foreach (var department in (IEnumerable<Department>)ViewBag.Departments)
                    {
                        <option value="@department.Id">@department.Name</option>
                    }
                }
            </select>
        </div>
        <div class="col-md-3">
            <select class="form-select" id="creditsFilter">
                <option value="">All Credits</option>
                <option value="1">1 Credit</option>
                <option value="2">2 Credits</option>
                <option value="3">3 Credits</option>
                <option value="4">4 Credits</option>
                <option value="5">5+ Credits</option>
            </select>
        </div>
    </div>

    <!-- Courses Grid -->
    <div class="row g-4" id="coursesGrid">
        @foreach (var course in Model)
        {
            <div class="col-lg-4 col-md-6 col-sm-12">
                <div class="card h-100 shadow-sm course-card">
                    <div class="card-header bg-gradient-primary text-white p-4">
                        <div class="d-flex align-items-center">
                            <div class="course-icon-container me-3">
                                <div class="course-icon rounded-circle d-flex align-items-center justify-content-center">
                                    <i class="fas fa-graduation-cap text-white"></i>
                                </div>
                            </div>
                            <div class="flex-grow-1">
                                <h5 class="card-title mb-1 text-white">@course.Title</h5>
                                <p class="card-subtitle mb-0 text-white-50">Course ID: @course.Id</p>
                            </div>
                            <div class="credits-badge">
                                <span class="badge bg-light text-primary fw-bold">@course.Credits Hour</span>
                            </div>
                        </div>
                    </div>
                    <div class="card-body p-4">
                        <div class="course-info">
                            <div class="info-item mb-3">
                                <i class="fas fa-award text-primary me-2"></i>
                                <span class="text-muted">Credits:</span>
                                <div class="fw-bold text-primary">@course.Credits</div>
                            </div>
                            <div class="info-item mb-3">
                                <i class="fas fa-chart-line text-info me-2"></i>
                                <span class="text-muted">Degree:</span>
                                <div class="fw-medium">@course.Degree</div>
                            </div>
                            <div class="info-item mb-3">
                                <i class="fas fa-level-down-alt text-warning me-2"></i>
                                <span class="text-muted">Min Degree:</span>
                                <div class="fw-medium">@course.MinDegree</div>
                            </div>
                            <div class="info-item mb-3">
                                <i class="fas fa-building text-primary me-2"></i>
                                <span class="text-muted">Department:</span>
                                <div class="fw-medium">
                                    @if (course.Department != null)
                                    {
                                        <span class="badge bg-primary">@course.Department.Name</span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-secondary">Not Assigned</span>
                                    }
                                </div>
                            </div>
                            <div class="info-item mb-3">
                                <i class="fas fa-user-tie text-success me-2"></i>
                                <span class="text-muted">Instructor:</span>
                                <div class="fw-medium">
                                    @if (course.Instructor != null)
                                    {
                                        <span class="badge bg-success">@course.Instructor.Name</span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-secondary">Not Assigned</span>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="card-footer bg-light p-3">
                        <div class="d-flex gap-2 mb-2">
                            <a href="@Url.Action("Details", "Course", new { id = course.Id })"
                               class="btn btn-outline-primary btn-sm flex-fill">
                                <i class="fas fa-eye me-1"></i>View Details
                            </a>
                            <a href="@Url.Action("Edit", "Course", new { id = course.Id })"
                               class="btn btn-outline-warning btn-sm flex-fill">
                                <i class="fas fa-edit me-1"></i>Edit
                            </a>
                            <button class="btn btn-outline-danger btn-sm" onclick="confirmDelete(@course.Id)">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                        <div class="d-flex gap-2">
                            <a href="@Url.Action("GetTraineesResults", "Course", new { Id = course.Id })"
                               class="btn btn-outline-info btn-sm flex-fill">
                                <i class="fas fa-chart-bar me-1"></i>Trainees Results
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>

    <!-- Pagination -->
    <div class="d-flex justify-content-center py-4">
        <nav aria-label="Page navigation">
            <ul class="pagination">
                @if (Model.HasPreviousPage)
                {
                    <li class="page-item">
                        <a class="page-link" href="?page=@(Model.PageIndex - 1)">Previous</a>
                    </li>
                }

                @for (int i = 1; i <= Model.TotalPages; i++)
                {
                    <li class="page-item @(i == Model.PageIndex ? "active" : "")">
                        <a class="page-link" href="?page=@i">@i</a>
                    </li>
                }

                @if (Model.HasNextPage)
                {
                    <li class="page-item">
                        <a class="page-link" href="?page=@(Model.PageIndex + 1)">Next</a>
                    </li>
                }
            </ul>
        </nav>
    </div>


    <!-- Empty State -->
    @if (!Model.Any())
    {
        <div class="text-center py-5">
            <div class="empty-state">
                <i class="fas fa-graduation-cap fa-5x text-muted mb-3"></i>
                <h3 class="text-muted">No Courses Found</h3>
                <p class="text-muted">Start by adding your first course to the system.</p>
                <button class="btn btn-primary mt-3">
                    <i class="fas fa-plus me-2"></i>Add First Course
                </button>
            </div>
        </div>
    }
</div>

<style>
    .bg-gradient-primary {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    }

    .course-card {
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        border: none;
        border-radius: 15px;
        overflow: hidden;
    }

        .course-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
        }

    .course-icon {
        width: 60px;
        height: 60px;
        background: rgba(255,255,255,0.2);
        border: 3px solid rgba(255,255,255,0.3);
        font-size: 1.5rem;
    }

    .course-icon-container {
        flex-shrink: 0;
    }

    .credits-badge {
        flex-shrink: 0;
    }

    .info-item {
        display: flex;
        align-items: flex-start;
        gap: 0.5rem;
    }

        .info-item > div {
            flex: 1;
        }

    .form-control:focus, .form-select:focus {
        border-color: #667eea;
        box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);
    }

    .btn-primary {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border: none;
    }

        .btn-primary:hover {
            background: linear-gradient(135deg, #5a6fd8 0%, #6a4190 100%);
            transform: translateY(-1px);
        }

    .badge {
        font-size: 0.75rem;
    }
</style>

<script>
    // Search functionality
    document.getElementById('searchInput').addEventListener('input', function() {
        filterCourses();
    });

    // Department filter functionality
    document.getElementById('departmentFilter').addEventListener('change', function() {
        filterCourses();
    });

    // Credits filter functionality
    document.getElementById('creditsFilter').addEventListener('change', function() {
        filterCourses();
    });

    // Combined filter function
    function filterCourses() {
        const selectedDepartment = document.getElementById('departmentFilter').value;
        const selectedCredits = document.getElementById('creditsFilter').value;
        const searchTerm = document.getElementById('searchInput').value.toLowerCase();
        const cards = document.querySelectorAll('.course-card');

        cards.forEach(card => {
            let isVisible = true;

            // Check search term
            if (searchTerm) {
                const title = card.querySelector('.card-title').textContent.toLowerCase();
                const courseInfo = card.querySelector('.course-info').textContent.toLowerCase();
                isVisible = isVisible && (title.includes(searchTerm) || courseInfo.includes(searchTerm));
            }

            // Check department filter
            if (selectedDepartment) {
                const departmentBadge = card.querySelector('.course-info .badge');
                let departmentText = '';

                if (departmentBadge && !departmentBadge.textContent.includes('Not Assigned')) {
                    departmentText = departmentBadge.textContent.trim();
                }

                // Get department name from ViewBag (you'll need to pass department names as data attributes)
                const departmentElement = card.querySelector('[data-department-id]');
                const courseDepartmentId = departmentElement ? departmentElement.getAttribute('data-department-id') : '';

                isVisible = isVisible && (courseDepartmentId === selectedDepartment);
            }

            // Check credits filter
            if (selectedCredits) {
                const creditsBadge = card.querySelector('.credits-badge .badge').textContent;
                const credits = parseInt(creditsBadge.match(/\d+/)[0]);

                if (selectedCredits === '5' && credits < 5) {
                    isVisible = false;
                } else if (selectedCredits !== '5' && credits.toString() !== selectedCredits) {
                    isVisible = false;
                }
            }

            card.closest('.col-lg-4').style.display = isVisible ? '' : 'none';
        });
    }


    // Delete confirmation
    function confirmDelete(courseId) {
        if (confirm('Are you sure you want to delete this course?')) {
            // Implement delete logic here
            window.location.href = `/Course/Delete/${courseId}`;
        }
    }
</script>